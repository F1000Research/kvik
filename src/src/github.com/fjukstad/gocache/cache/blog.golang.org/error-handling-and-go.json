{"Response":{"Status":"200 OK","StatusCode":200,"Proto":"HTTP/1.1","ProtoMajor":1,"ProtoMinor":1,"Header":{"Alternate-Protocol":["80:quic"],"Cache-Control":["private"],"Content-Type":["text/html; charset=utf-8"],"Date":["Thu, 17 Apr 2014 06:37:13 GMT"],"Server":["Google Frontend"]},"Body":null,"ContentLength":-1,"TransferEncoding":["chunked"],"Close":false,"Trailer":null,"Request":{"Method":"GET","URL":{"Scheme":"http","Opaque":"","User":null,"Host":"blog.golang.org","Path":"/error-handling-and-go","RawQuery":"","Fragment":""},"Proto":"HTTP/1.1","ProtoMajor":1,"ProtoMinor":1,"Header":{},"Body":null,"ContentLength":0,"TransferEncoding":null,"Close":false,"Host":"blog.golang.org","Form":null,"PostForm":null,"MultipartForm":null,"Trailer":null,"RemoteAddr":"","RequestURI":"","TLS":null}},"Content":"\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n\u0009\u003cmeta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"\u003e\n\u0009\u003ctitle\u003eError handling and Go - The Go Blog\u003c/title\u003e\n\u0009\u003clink type=\"text/css\" rel=\"stylesheet\" href=\"/lib/godoc/style.css\"\u003e\n\u0009\u003clink rel=\"alternate\" type=\"application/atom+xml\" title=\"blog.golang.org - Atom Feed\" href=\"http://blog.golang.org/feed.atom\" /\u003e\n\u0009\u003cscript type=\"text/javascript\"\u003ewindow.initFuncs = [];\u003c/script\u003e\n\u0009\u003cstyle\u003e\n\u0009\u0009#sidebar {\n\u0009\u0009\u0009float: right;\n\u0009\u0009\u0009padding-left: 20px;\n\u0009\u0009\u0009width: 250px;\n\u0009\u0009\u0009background: white;\n\u0009\u0009}\n\u0009\u0009#sidebar p, #sidebar ul {\n\u0009\u0009\u0009margin: 20px 5px;\n\u0009\u0009}\n\u0009\u0009#sidebar ul {\n\u0009\u0009\u0009padding: 0;\n\u0009\u0009}\n\u0009\u0009#sidebar li {\n\u0009\u0009\u0009list-style-type: none;\n\u0009\u0009}\n\u0009\u0009#content .author {\n\u0009\u0009\u0009font-style: italic;\n\u0009\u0009}\n\u0009\u0009#content .article {\n\u0009\u0009\u0009margin-bottom: 50px;\n\u0009\u0009}\n\u0009\u0009#content .date {\n\u0009\u0009\u0009color: #999;\n\u0009\u0009}\n\u0009\u0009#content .tags {\n\u0009\u0009\u0009color: #999;\n\u0009\u0009\u0009font-size: smaller;\n\u0009\u0009}\n\u0009\u0009#content .iframe, #content .image {\n\u0009\u0009\u0009margin: 20px;\n\u0009\u0009}\n\u0009\u0009#content .title {\n\u0009\u0009\u0009margin: 20px 0;\n\u0009\u0009}\n\u0009\u003c/style\u003e\n\u003cscript type=\"text/javascript\"\u003e\nvar _gaq = _gaq || [];\n_gaq.push([\"_setAccount\", \"UA-11222381-3\"]);\n_gaq.push([\"_trackPageview\"]);\n\u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n\u003cdiv id=\"topbar\"\u003e\u003cdiv class=\"container\"\u003e\n\n\u003cform method=\"GET\" action=\"http://golang.org/search\"\u003e\n\u003cdiv id=\"menu\"\u003e\n\u003ca href=\"http://golang.org/doc/\"\u003eDocuments\u003c/a\u003e\n\u003ca href=\"http://golang.org/pkg/\"\u003ePackages\u003c/a\u003e\n\u003ca href=\"http://golang.org/project/\"\u003eThe Project\u003c/a\u003e\n\u003ca href=\"http://golang.org/help/\"\u003eHelp\u003c/a\u003e\n\u003ca href=\"/\"\u003eBlog\u003c/a\u003e\n\u003cinput type=\"text\" id=\"search\" name=\"q\" class=\"inactive\" value=\"Search\" placeholder=\"Search\"\u003e\n\u003c/div\u003e\n\u003cdiv id=\"heading\"\u003e\u003ca href=\"http://golang.org/\"\u003eThe Go Programming Language\u003c/a\u003e\u003c/div\u003e\n\u003c/form\u003e\n\n\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv id=\"page\"\u003e\n\u003cdiv class=\"container\"\u003e\n\n\u003cdiv id=\"sidebar\"\u003e\n\u0009\n\u0009\u0009\n\u0009\u0009\u0009\u003ch4\u003eNext article\u003c/h4\u003e\n\u0009\u0009\u0009\u003cp\u003e\u003ca href=\"/go-for-app-engine-is-now-generally\"\u003eGo for App Engine is now generally available\u003c/a\u003e\u003c/p\u003e\n\u0009\u0009\n\u0009\u0009\n\u0009\u0009\n\u0009\u0009\u0009\u003ch4\u003ePrevious article\u003c/h4\u003e\n\u0009\u0009\u0009\u003cp\u003e\u003ca href=\"/first-class-functions-in-go-and-new-go\"\u003e\u0026#34;First Class Functions in Go\u0026#34;\u003c/a\u003e\u003c/p\u003e\n\u0009\u0009\n\u0009\u0009\n\u0009\u0009\n\u0009\u0009\u0009\u003ch4\u003eRelated articles\u003c/h4\u003e\n\u0009\u0009\u0009\u003cul\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/race-detector\"\u003eIntroducing the Go Race Detector\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-maps-in-action\"\u003eGo maps in action\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-fmt-your-code\"\u003ego fmt your code\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/organizing-go-code\"\u003eOrganizing Go code\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/debugging-go-programs-with-gnu-debugger\"\u003eDebugging Go programs with the GNU Debugger\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-imagedraw-package\"\u003eThe Go image/draw package\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-image-package\"\u003eThe Go image package\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/laws-of-reflection\"\u003eThe Laws of Reflection\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/first-class-functions-in-go-and-new-go\"\u003e\u0026#34;First Class Functions in Go\u0026#34;\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/profiling-go-programs\"\u003eProfiling Go Programs\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/gif-decoder-exercise-in-go-interfaces\"\u003eA GIF decoder: an exercise in Go interfaces\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/introducing-gofix\"\u003eIntroducing Gofix\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/godoc-documenting-go-code\"\u003eGodoc: documenting Go code\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/gobs-of-data\"\u003eGobs of data\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/c-go-cgo\"\u003eC? Go? Cgo!\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/json-and-go\"\u003eJSON and Go\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-slices-usage-and-internals\"\u003eGo Slices: usage and internals\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-concurrency-patterns-timing-out-and\"\u003eGo Concurrency Patterns: Timing out, moving on\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/defer-panic-and-recover\"\u003eDefer, Panic, and Recover\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/share-memory-by-communicating\"\u003eShare Memory By Communicating\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/json-rpc-tale-of-interfaces\"\u003eJSON-RPC: a tale of interfaces\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\u0009\n\u0009\u0009\u0009\u003c/ul\u003e\n\u0009\u0009\n\u0009\n\u0009\n\u0009\u003ch4\u003eLinks\u003c/h4\u003e\n\u0009\u003cul\u003e\n\u0009\u003cli\u003e\u003ca href='http://golang.org/'\u003egolang.org\u003c/a\u003e\u003c/li\u003e\n\u0009\u003cli\u003e\u003ca href='http://golang.org/doc/install.html'\u003eInstall Go\u003c/a\u003e\u003c/li\u003e\n\u0009\u003cli\u003e\u003ca href='http://tour.golang.org/'\u003eA Tour of Go\u003c/a\u003e\u003c/li\u003e\n\u0009\u003cli\u003e\u003ca href='http://golang.org/doc/'\u003eGo Documentation\u003c/a\u003e\u003c/li\u003e\n\u0009\u003cli\u003e\u003ca href='http://groups.google.com/group/golang-nuts'\u003eGo Mailing List\u003c/a\u003e\u003c/li\u003e\n\u0009\u003cli\u003e\u003ca href='https://plus.google.com/101406623878176903605'\u003eGo on Google+\u003c/a\u003e\u003c/li\u003e\n\u0009\u003cli\u003e\u003ca href='https://plus.google.com/112164155169467723645/posts'\u003eGo+ Community\u003c/a\u003e\u003c/li\u003e\n\u0009\u003cli\u003e\u003ca href='http://twitter.com/golang'\u003eGo on Twitter\u003c/a\u003e\u003c/li\u003e\n\u0009\u003c/ul\u003e\n\u0009\n\u0009\u003ch4\u003eKeep up with Google Developers\u003c/h4\u003e\n\u0009\u003cul\u003e\n\u0009\u003cli\u003e\u003ca href='https://plus.google.com/+GoogleDevelopers/posts'\u003eGoogle Developers +Page\u003c/a\u003e\u003c/li\u003e\n\u0009\u003cli\u003e\u003ca href='https://developers.google.com/live/'\u003eGoogle Developers Live\u003c/a\u003e\u003c/li\u003e\n\u0009\u003cli\u003e\u003ca href='https://developers.google.com/'\u003eGoogle Developers\u003c/a\u003e\u003c/li\u003e\n\u0009\u003cli\u003e\u003ca href='http://googledevelopers.blogspot.com/'\u003eGoogle Developers Blog\u003c/a\u003e\u003c/li\u003e\n\u0009\u003c/ul\u003e\n\u0009\n\u0009\u003ch4\u003eBlog Archive\u003c/h4\u003e\n\u0009\u003cp\u003e\u003ca href=\"/index\"\u003eArticle index\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cdiv id=\"content\"\u003e\n\u0009\u003ch1\u003e\u003ca href=\"/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n\u0009\n\u0009\n\u0009\u003cdiv class=\"article\"\u003e\n\u0009\u0009\u003ch3 class=\"title\"\u003e\u003ca href=\"/error-handling-and-go\"\u003eError handling and Go\u003c/a\u003e\u003c/h3\u003e\n\u0009\u0009\u003cp class=\"date\"\u003e12 July 2011\u003c/p\u003e\n\u0009\u0009\n\n  \n  \n    \n      \n  \u003ch4 id=\"TOC_1.\"\u003eIntroduction\u003c/h4\u003e\n  \n  \n  \u003cp\u003e\n    If you have written any Go code you have probably encountered the built-in \u003ccode\u003eerror\u003c/code\u003e type. Go code uses \u003ccode\u003eerror\u003c/code\u003e values to indicate an abnormal state. For example, the \u003ccode\u003eos.Open\u003c/code\u003e function returns a non-nil \u003ccode\u003eerror\u003c/code\u003e value when it fails to open a file.\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003efunc Open(name string) (file *File, err error)\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    The following code uses \u003ccode\u003eos.Open\u003c/code\u003e to open a file. If an error occurs it calls \u003ccode\u003elog.Fatal\u003c/code\u003e to print the error message and stop.\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003ef, err := os.Open(\u0026#34;filename.ext\u0026#34;)\nif err != nil {\n    log.Fatal(err)\n}\n// do something with the open *File f\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    You can get a lot done in Go knowing just this about the \u003ccode\u003eerror\u003c/code\u003e type, but in this article we\u0026#39;ll take a closer look at \u003ccode\u003eerror\u003c/code\u003e and discuss some good practices for error handling in Go.\n  \u003c/p\u003e\n  \n\n\n    \n      \n  \u003ch4 id=\"TOC_2.\"\u003eThe error type\u003c/h4\u003e\n  \n  \n  \u003cp\u003e\n    The \u003ccode\u003eerror\u003c/code\u003e type is an interface type. An \u003ccode\u003eerror\u003c/code\u003e variable represents any value that can describe itself as a string. Here is the interface\u0026#39;s declaration:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003etype error interface {\n    Error() string\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    The \u003ccode\u003eerror\u003c/code\u003e type, as with all built in types, is \u003ca href=\"http://golang.org/doc/go_spec.html#Predeclared_identifiers\" target=\"_blank\"\u003epredeclared\u003c/a\u003e in the \u003ca href=\"http://golang.org/doc/go_spec.html#Blocks\" target=\"_blank\"\u003euniverse block\u003c/a\u003e.\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    The most commonly-used \u003ccode\u003eerror\u003c/code\u003e implementation is the \u003ca href=\"http://golang.org/pkg/errors/\" target=\"_blank\"\u003eerrors\u003c/a\u003e package\u0026#39;s unexported \u003ccode\u003eerrorString\u003c/code\u003e type.\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003e// errorString is a trivial implementation of error.\ntype errorString struct {\n    s string\n}\n\nfunc (e *errorString) Error() string {\n    return e.s\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    You can construct one of these values with the \u003ccode\u003eerrors.New\u003c/code\u003e function. It takes a string that it converts to an \u003ccode\u003eerrors.errorString\u003c/code\u003e and returns as an \u003ccode\u003eerror\u003c/code\u003e value.\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003e// New returns an error that formats as the given text.\nfunc New(text string) error {\n    return \u0026amp;errorString{text}\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    Here\u0026#39;s how you might use \u003ccode\u003eerrors.New\u003c/code\u003e:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003efunc Sqrt(f float64) (float64, error) {\n    if f \u0026lt; 0 {\n        return 0, errors.New(\u0026#34;math: square root of negative number\u0026#34;)\n    }\n    // implementation\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    A caller passing a negative argument to \u003ccode\u003eSqrt\u003c/code\u003e receives a non-nil \u003ccode\u003eerror\u003c/code\u003e value (whose concrete representation is an \u003ccode\u003eerrors.errorString\u003c/code\u003e value). The caller can access the error string (\u0026#34;math: square root of...\u0026#34;) by calling the `error`\u0026#39;s \u003ccode\u003eError\u003c/code\u003e method, or by just printing it:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003ef, err := Sqrt(-1)\nif err != nil {\n    fmt.Println(err)\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    The \u003ca href=\"http://golang.org/pkg/fmt/\" target=\"_blank\"\u003efmt\u003c/a\u003e package formats an \u003ccode\u003eerror\u003c/code\u003e value by calling its \u003ccode\u003eError() string\u003c/code\u003e method.\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    It is the error implementation\u0026#39;s responsibility to summarize the context. The error returned by \u003ccode\u003eos.Open\u003c/code\u003e formats as \u0026#34;open /etc/passwd: permission denied,\u0026#34; not just \u0026#34;permission denied.\u0026#34;  The error returned by our \u003ccode\u003eSqrt\u003c/code\u003e is missing information about the invalid argument.\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    To add that information, a useful function is the \u003ccode\u003efmt\u003c/code\u003e package\u0026#39;s \u003ccode\u003eErrorf\u003c/code\u003e. It formats a string according to `Printf`\u0026#39;s rules and returns it as an \u003ccode\u003eerror\u003c/code\u003e created by \u003ccode\u003eerrors.New\u003c/code\u003e.\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003eif f \u0026lt; 0 {\n    return 0, fmt.Errorf(\u0026#34;math: square root of negative number %g\u0026#34;, f)\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    In many cases \u003ccode\u003efmt.Errorf\u003c/code\u003e is good enough, but since \u003ccode\u003eerror\u003c/code\u003e is an interface, you can use arbitrary data structures as error values, to allow callers to inspect the details of the error.\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    For instance, our hypothetical callers might want to recover the invalid argument passed to \u003ccode\u003eSqrt\u003c/code\u003e. We can enable that by defining a new error implementation instead of using \u003ccode\u003eerrors.errorString\u003c/code\u003e:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003etype NegativeSqrtError float64\n\nfunc (f NegativeSqrtError) Error() string {\n    return fmt.Sprintf(\u0026#34;math: square root of negative number %g\u0026#34;, float64(f))\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    A sophisticated caller can then use a \u003ca href=\"http://golang.org/doc/go_spec.html#Type_assertions\" target=\"_blank\"\u003etype assertion\u003c/a\u003e to check for a \u003ccode\u003eNegativeSqrtError\u003c/code\u003e and handle it specially, while callers that just pass the error to \u003ccode\u003efmt.Println\u003c/code\u003e or \u003ccode\u003elog.Fatal\u003c/code\u003e will see no change in behavior.\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    As another example, the \u003ca href=\"http://golang.org/pkg/encoding/json/\" target=\"_blank\"\u003ejson\u003c/a\u003e package specifies a \u003ccode\u003eSyntaxError\u003c/code\u003e type that the \u003ccode\u003ejson.Decode\u003c/code\u003e function returns when it encounters a syntax error parsing a JSON blob.\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003etype SyntaxError struct {\n    msg    string // description of error\n    Offset int64  // error occurred after reading Offset bytes\n}\n\nfunc (e *SyntaxError) Error() string { return e.msg }\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    The \u003ccode\u003eOffset\u003c/code\u003e field isn\u0026#39;t even shown in the default formatting of the error, but callers can use it to add file and line information to their error messages:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003eif err := dec.Decode(\u0026amp;val); err != nil {\n    if serr, ok := err.(*json.SyntaxError); ok {\n        line, col := findLine(f, serr.Offset)\n        return fmt.Errorf(\u0026#34;%s:%d:%d: %v\u0026#34;, f.Name(), line, col, err)\n    }\n    return err\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    (This is a slightly simplified version of some \u003ca href=\"http://camlistore.org/code/?p=camlistore.git;a=blob;f=lib/go/camli/jsonconfig/eval.go#l68\" target=\"_blank\"\u003eactual code\u003c/a\u003e from the \u003ca href=\"http://camlistore.org\" target=\"_blank\"\u003eCamlistore\u003c/a\u003e project.)\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    The \u003ccode\u003eerror\u003c/code\u003e interface requires only a \u003ccode\u003eError\u003c/code\u003e method; specific error implementations might have additional methods. For instance, the \u003ca href=\"http://golang.org/pkg/net/\" target=\"_blank\"\u003enet\u003c/a\u003e package returns errors of type \u003ccode\u003eerror\u003c/code\u003e, following the usual convention, but some of the error implementations have additional methods defined by the \u003ccode\u003enet.Error\u003c/code\u003e interface:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003epackage net\n\ntype Error interface {\n    error\n    Timeout() bool   // Is the error a timeout?\n    Temporary() bool // Is the error temporary?\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    Client code can test for a \u003ccode\u003enet.Error\u003c/code\u003e with a type assertion and then distinguish transient network errors from permanent ones. For instance, a web crawler might sleep and retry when it encounters a temporary error and give up otherwise.\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003eif nerr, ok := err.(net.Error); ok \u0026amp;\u0026amp; nerr.Temporary() {\n    time.Sleep(1e9)\n    continue\n}\nif err != nil {\n    log.Fatal(err)\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n\n    \n      \n  \u003ch4 id=\"TOC_3.\"\u003eSimplifying repetitive error handling\u003c/h4\u003e\n  \n  \n  \u003cp\u003e\n    In Go, error handling is important. The language\u0026#39;s design and conventions encourage you to explicitly check for errors where they occur (as distinct from the convention in other languages of throwing exceptions and sometimes catching them). In some cases this makes Go code verbose, but fortunately there are some techniques you can use to minimize repetitive error handling.\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    Consider an \u003ca href=\"http://code.google.com/appengine/docs/go/\" target=\"_blank\"\u003eApp Engine\u003c/a\u003e application with an HTTP handler that retrieves a record from the datastore and formats it with a template.\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003efunc init() {\n    http.HandleFunc(\u0026#34;/view\u0026#34;, viewRecord)\n}\n\nfunc viewRecord(w http.ResponseWriter, r *http.Request) {\n    c := appengine.NewContext(r)\n    key := datastore.NewKey(c, \u0026#34;Record\u0026#34;, r.FormValue(\u0026#34;id\u0026#34;), 0, nil)\n    record := new(Record)\n    if err := datastore.Get(c, key, record); err != nil {\n        http.Error(w, err.Error(), 500)\n        return\n    }\n    if err := viewTemplate.Execute(w, record); err != nil {\n        http.Error(w, err.Error(), 500)\n    }\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    This function handles errors returned by the \u003ccode\u003edatastore.Get\u003c/code\u003e function and `viewTemplate`\u0026#39;s \u003ccode\u003eExecute\u003c/code\u003e method. In both cases, it presents a simple error message to the user with the HTTP status code 500 (\u0026#34;Internal Server Error\u0026#34;). This looks like a manageable amount of code, but add some more HTTP handlers and you quickly end up with many copies of identical error handling code.\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    To reduce the repetition we can define our own HTTP \u003ccode\u003eappHandler\u003c/code\u003e type that includes an \u003ccode\u003eerror\u003c/code\u003e return value:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003etype appHandler func(http.ResponseWriter, *http.Request) error\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    Then we can change our \u003ccode\u003eviewRecord\u003c/code\u003e function to return errors:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003efunc viewRecord(w http.ResponseWriter, r *http.Request) error {\n    c := appengine.NewContext(r)\n    key := datastore.NewKey(c, \u0026#34;Record\u0026#34;, r.FormValue(\u0026#34;id\u0026#34;), 0, nil)\n    record := new(Record)\n    if err := datastore.Get(c, key, record); err != nil {\n        return err\n    }\n    return viewTemplate.Execute(w, record)\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    This is simpler than the original version, but the \u003ca href=\"http://golang.org/pkg/net/http/\" target=\"_blank\"\u003ehttp\u003c/a\u003e package doesn\u0026#39;t understand functions that return \u003ccode\u003eerror\u003c/code\u003e. To fix this we can implement the \u003ccode\u003ehttp.Handler\u003c/code\u003e interface\u0026#39;s \u003ccode\u003eServeHTTP\u003c/code\u003e method on \u003ccode\u003eappHandler\u003c/code\u003e:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003efunc (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    if err := fn(w, r); err != nil {\n        http.Error(w, err.Error(), 500)\n    }\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    The \u003ccode\u003eServeHTTP\u003c/code\u003e method calls the \u003ccode\u003eappHandler\u003c/code\u003e function and displays the returned error (if any) to the user.  Notice that the method\u0026#39;s receiver, \u003ccode\u003efn\u003c/code\u003e, is a function. (Go can do that!) The method invokes the function by calling the receiver in the expression \u003ccode\u003efn(w, r)\u003c/code\u003e.\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    Now when registering \u003ccode\u003eviewRecord\u003c/code\u003e with the http package we use the \u003ccode\u003eHandle\u003c/code\u003e function (instead of \u003ccode\u003eHandleFunc\u003c/code\u003e) as \u003ccode\u003eappHandler\u003c/code\u003e is an \u003ccode\u003ehttp.Handler\u003c/code\u003e (not an \u003ccode\u003ehttp.HandlerFunc\u003c/code\u003e).\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003efunc init() {\n    http.Handle(\u0026#34;/view\u0026#34;, appHandler(viewRecord))\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    With this basic error handling infrastructure in place, we can make it more user friendly. Rather than just displaying the error string, it would be better to give the user a simple error message with an appropriate HTTP status code, while logging the full error to the App Engine developer console for debugging purposes.\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    To do this we create an \u003ccode\u003eappError\u003c/code\u003e struct containing an \u003ccode\u003eerror\u003c/code\u003e and some other fields:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003etype appError struct {\n    Error   error\n    Message string\n    Code    int\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    Next we modify the appHandler type to return \u003ccode\u003e*appError\u003c/code\u003e values:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003etype appHandler func(http.ResponseWriter, *http.Request) *appError\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    (It\u0026#39;s usually a mistake to pass back the concrete type of an error rather than \u003ccode\u003eerror\u003c/code\u003e, for reasons discussed in \u003ca href=\"http://golang.org/doc/go_faq.html#nil_error\" target=\"_blank\"\u003ethe Go FAQ\u003c/a\u003e, but it\u0026#39;s the right thing to do here because \u003ccode\u003eServeHTTP\u003c/code\u003e is the only place that sees the value and uses its contents.)\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    And make `appHandler`\u0026#39;s \u003ccode\u003eServeHTTP\u003c/code\u003e method display the `appError`\u0026#39;s \u003ccode\u003eMessage\u003c/code\u003e to the user with the correct HTTP status \u003ccode\u003eCode\u003c/code\u003e and log the full \u003ccode\u003eError\u003c/code\u003e to the developer console:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003efunc (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    if e := fn(w, r); e != nil { // e is *appError, not os.Error.\n        c := appengine.NewContext(r)\n        c.Errorf(\u0026#34;%v\u0026#34;, e.Error)\n        http.Error(w, e.Message, e.Code)\n    }\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    Finally, we update \u003ccode\u003eviewRecord\u003c/code\u003e to the new function signature and have it return more context when it encounters an error:\n  \u003c/p\u003e\n  \n\n  \n  \u003cdiv class=\"code\"\u003e\u003cpre\u003efunc viewRecord(w http.ResponseWriter, r *http.Request) *appError {\n    c := appengine.NewContext(r)\n    key := datastore.NewKey(c, \u0026#34;Record\u0026#34;, r.FormValue(\u0026#34;id\u0026#34;), 0, nil)\n    record := new(Record)\n    if err := datastore.Get(c, key, record); err != nil {\n        return \u0026amp;appError{err, \u0026#34;Record not found\u0026#34;, 404}\n    }\n    if err := viewTemplate.Execute(w, record); err != nil {\n        return \u0026amp;appError{err, \u0026#34;Can\u0026#39;t display record\u0026#34;, 500}\n    }\n    return nil\n}\u003c/pre\u003e\u003c/div\u003e\n  \n\n  \n  \u003cp\u003e\n    This version of \u003ccode\u003eviewRecord\u003c/code\u003e is the same length as the original, but now each of those lines has specific meaning and we are providing a friendlier user experience.\n  \u003c/p\u003e\n  \n\n  \n  \u003cp\u003e\n    It doesn\u0026#39;t end there; we can further improve the error handling in our application. Some ideas:\n  \u003c/p\u003e\n  \n\n  \u003cul\u003e\n  \n    \u003cli\u003egive the error handler a pretty HTML template,\u003c/li\u003e\n  \n  \u003c/ul\u003e\n\n  \u003cul\u003e\n  \n    \u003cli\u003emake debugging easier by writing the stack trace to the HTTP response when the user is an administrator,\u003c/li\u003e\n  \n  \u003c/ul\u003e\n\n  \u003cul\u003e\n  \n    \u003cli\u003ewrite a constructor function for \u003ccode\u003eappError\u003c/code\u003e that stores the stack trace for easier debugging,\u003c/li\u003e\n  \n  \u003c/ul\u003e\n\n  \u003cul\u003e\n  \n    \u003cli\u003erecover from panics inside the \u003ccode\u003eappHandler\u003c/code\u003e, logging the error to the console as \u0026#34;Critical,\u0026#34; while telling the user \u0026#34;a serious error has occurred.\u0026#34; This is a nice touch to avoid exposing the user to inscrutable error messages caused by programming errors. See the \u003ca href=\"http://golang.org/doc/articles/defer_panic_recover.html\" target=\"_blank\"\u003eDefer, Panic, and Recover\u003c/a\u003e article for more details.\u003c/li\u003e\n  \n  \u003c/ul\u003e\n\n\n    \n      \n  \u003ch4 id=\"TOC_4.\"\u003eConclusion\u003c/h4\u003e\n  \n  \n  \u003cp\u003e\n    Proper error handling is an essential requirement of good software. By employing the techniques described in this post you should be able to write more reliable and succinct Go code.\n  \u003c/p\u003e\n  \n\n\n    \n  \n\n\n\u0009\u0009\n\u0009\u0009\u0009\u003cp class=\"author\"\u003eBy Andrew Gerrand\u003c/p\u003e\n\u0009\u0009\n\u0009\u003c/div\u003e\n\n\u0009\n\u0009\u0009\u003ch2\u003eRelated articles\u003c/h2\u003e\n\u0009\u0009\u003cul\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/race-detector\"\u003eIntroducing the Go Race Detector\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-maps-in-action\"\u003eGo maps in action\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-fmt-your-code\"\u003ego fmt your code\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/organizing-go-code\"\u003eOrganizing Go code\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/debugging-go-programs-with-gnu-debugger\"\u003eDebugging Go programs with the GNU Debugger\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-imagedraw-package\"\u003eThe Go image/draw package\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-image-package\"\u003eThe Go image package\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/laws-of-reflection\"\u003eThe Laws of Reflection\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/first-class-functions-in-go-and-new-go\"\u003e\u0026#34;First Class Functions in Go\u0026#34;\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/profiling-go-programs\"\u003eProfiling Go Programs\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/gif-decoder-exercise-in-go-interfaces\"\u003eA GIF decoder: an exercise in Go interfaces\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/introducing-gofix\"\u003eIntroducing Gofix\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/godoc-documenting-go-code\"\u003eGodoc: documenting Go code\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/gobs-of-data\"\u003eGobs of data\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/c-go-cgo\"\u003eC? Go? Cgo!\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/json-and-go\"\u003eJSON and Go\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-slices-usage-and-internals\"\u003eGo Slices: usage and internals\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/go-concurrency-patterns-timing-out-and\"\u003eGo Concurrency Patterns: Timing out, moving on\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/defer-panic-and-recover\"\u003eDefer, Panic, and Recover\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/share-memory-by-communicating\"\u003eShare Memory By Communicating\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u0009\u003cli\u003e\u003ca href=\"/json-rpc-tale-of-interfaces\"\u003eJSON-RPC: a tale of interfaces\u003c/a\u003e\u003c/li\u003e\n\u0009\u0009\n\u0009\u0009\u003c/ul\u003e\n\u0009\n\n\u003c/div\u003e\n\n\u003cdiv id=\"footer\"\u003e\n\u0009\u003cp\u003e\n\u0009Except as\n\u0009\u003ca href=\"https://developers.google.com/site-policies#restrictions\"\u003enoted\u003c/a\u003e,\n\u0009the content of this page is licensed under the Creative Commons\n\u0009Attribution 3.0 License,\u003cbr\u003e\n\u0009and code is licensed under a \u003ca href=\"http://golang.org/LICENSE\"\u003eBSD license\u003c/a\u003e.\u003cbr\u003e\n\u0009\u003ca href=\"http://golang.org/doc/tos.html\"\u003eTerms of Service\u003c/a\u003e | \n\u0009\u003ca href=\"http://www.google.com/intl/en/policies/privacy/\"\u003ePrivacy Policy\u003c/a\u003e\n\u0009\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cscript type=\"text/javascript\"\u003e\n(function() {\n  var ga = document.createElement(\"script\"); ga.type = \"text/javascript\"; ga.async = true;\n  ga.src = (\"https:\" == document.location.protocol ? \"https://ssl\" : \"http://www\") + \".google-analytics.com/ga.js\";\n  var s = document.getElementsByTagName(\"script\")[0]; s.parentNode.insertBefore(ga, s);\n})();\n\u003c/script\u003e\n\u003c/body\u003e\n\u003cscript src=\"/lib/godoc/jquery.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/lib/godoc/playground.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/lib/godoc/play.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/lib/godoc/godocs.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n$(function() {\n\u0009\n\u0009$('.playground \u003e pre.numbers, .code \u003e pre.numbers').each(function() {\n\u0009\u0009var $spans = $(this).find('\u003e span');\n\n\u0009\u0009\n\u0009\u0009var max = 0;\n\u0009\u0009$spans.each(function() {\n\u0009\u0009\u0009var n = $(this).attr('num')*1;\n\u0009\u0009\u0009if (n \u003e max) max = n;\n\u0009\u0009});\n\u0009\u0009var width = 2;\n\u0009\u0009while (max \u003e 10) {\n\u0009\u0009\u0009max = max / 10;\n\u0009\u0009\u0009width++;\n\u0009\u0009}\n\n\u0009\u0009\n\u0009\u0009$spans.each(function() {\n\u0009\u0009\u0009var n = $(this).attr('num')+' ';\n\u0009\u0009\u0009while (n.length \u003c width) n = ' '+n;\n\u0009\u0009\u0009$('\u003cspan class=\"number\"\u003e').text(n).insertBefore(this);\n\u0009\u0009});\n\u0009});\n\n\u0009initPlayground(new HTTPTransport());\n});\n\u003c/script\u003e\n\u003c/html\u003e\n"}